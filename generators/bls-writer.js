var GenName = "BlsWriter";

Generators[GenName] = new StagedBrickGenerator(GenName, [new SBG_SlowIterator(function(inst) {
	var tb = inst.bricks[inst.currI];
	
	//TODO: export generated ramps, etc. only supports basic for now, except preloaded bricks.
	var tbn = ToBlsBasicName(tb.BoundingBox.x, tb.BoundingBox.y, tb.BoundingBox.z);
	if(tb.BlsRef != "") { //brick was loaded from a BLS, restore original (or internally modified) data
		var nl = tb.BlsRef + '" ';
		nl += tb.Position.x/2 + " " + tb.Position.y/2 + " " + tb.Position.z/5 + " ";
		nl += (tb.RotationIndex - tb.BlsData.ExtraRotation) + " ";
		nl += tb.BlsData.IsBaseplate + " ";
		nl += ColorQuantize([tb.Color.r, tb.Color.g, tb.Color.b, 1.0], brsColorsetRGB).SetI + " ";
		nl += tb.BlsData.PrintName + " ";
		nl += tb.BlsData.ColorFX + " ";
		nl += tb.BlsData.ShapeFX + " ";
		nl += tb.BlsData.Raycasting + " ";
		nl += tb.Collision ? "1 " : "0 ";
		nl += tb.Rendering ? "1 " : "0 ";
		inst.lines.push(nl);
		if(typeof tb.BlsData.ExtraLines !== "undefined") {
			for(var i = 0; i < tb.BlsData.ExtraLines.length; i++) {
				inst.lines.push(tb.BlsData.ExtraLines[i]);
			}
		}
	} else { //brick was internally generated, setup placeholder properties
		var nl = tbn.Name + '" '; //name
		nl += tb.Position.x/2 + " " + tb.Position.y/2 + " " + tb.Position.z/5 + " "; //position
		nl += (tb.RotationIndex + tbn.Rotation) * 1 + " "; //rotation index
		nl += "0 "; //is baseplate
		nl += ColorQuantize([tb.Color.r, tb.Color.g, tb.Color.b, 1.0], brsColorsetRGB).SetI + " "; //colorset 	index
		nl += " "; //print ID
		nl += "0 0 1 "; //colorfx, shapefx, ray
		nl += tb.Collision ? "1 " : "0 "; //col
		nl += tb.Rendering ? "1 " : "0 "; //ren
		inst.lines.push(nl);
	}
	
	inst.currI++;
	return inst.currI == inst.maxI;
	//1x16F" -47 -41.25 0.3 1 0 6  0 0 1 1 1
	//BrickName", PosX, PosY, PosZ, AngleID, IsBaseplate, ColorID, Empty Space or PrintID, ColorFXID, ShapeFXID, Ray, Col, Ren
	//Event/light/owner/emitter/etc. (i.e. non-brick) lines start with +-
}, {
	RunSpeed: 50,
	MaxExecTime: 40,
	OnStagePause: function(inst) {
		return "Preparing BLS... " + inst.currI + "/" + inst.maxI;
	}
})], {
	Controls: {},
	OnSetup: function(inst) {
		inst.lines = [];
		inst.bricks = inst.callerParams.BrickList;
		
		if(inst.bricks.length == 0) {
			inst.abort = "No bricks to save";
			return;
		}
		
		inst.lines.push("This is a Blockland save file.  You probably shouldn't modify it cause you'll screw it up."); //well i'm gonna write my *own* save file then >:(
		inst.lines.push("1");
		inst.lines.push("Generated by a third-party program (BRSerker)");
		for(var i = 0; i < Math.min(brsColorsetRGB.length, 64); i++) {
			inst.lines.push(brsColorsetRGB[i][0].toFixed(6) + " " + brsColorsetRGB[i][1].toFixed(6) + " " + brsColorsetRGB[i][2].toFixed(6) + " " + brsColorsetRGB[i][3].toFixed(6));
		}
		for(var i = brsColorsetRGB.length; i < 64; i++) {
			inst.lines.push("1.000000 0.000000 1.000000 0.000000");
		}
		
		inst.lines.push("Linecount " + inst.bricks.length);
		
		
		inst.currI = 0;
		inst.maxI = inst.bricks.length;
	},
	OnFinalize: function(inst) {
		inst.lines.push("");
		var bytes = new TextEncoder("windows-1252", {NONSTANDARD_allowLegacyEncoding: true}).encode(inst.lines.join("\r\n"));
		BlobDownload("generated.bls", [bytes], "text/plain");
	},
	Description: "Saves bricks to a Blockland save file (.BLS). Will retain information from BlsReader!"
});
var o = new Option(GenName, GenName);
$(o).html(GenName);
$("#generator-type").append(o);
Generators[GenName].OptionElement = o;